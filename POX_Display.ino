#include <Wire.h>
#include <Adafruit_GFX.h>
#include <gfxfont.h>

#include <splash.h>

#include <Adafruit_SH110X.h>
#define i2c_Addr 0x3C 
#define SCREEN_HEIGHT 64
#define SCREEN_WIDTH 128
#define OLED_RESET -1  

Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// 'Graphics Bitmap', 128x64px
const unsigned char myBitmap [] PROGMEM = {
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe1, 0xe3, 0x3f, 0xf3, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf1, 0xe7, 0xff, 0xff, 0xff, 0xe7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf5, 0xd7, 0xba, 0x7b, 0xff, 0xe7, 0x3a, 0xe3, 0xc7, 0xa6, 0x7f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf4, 0xd6, 0x20, 0x23, 0xff, 0xe7, 0x80, 0x59, 0xb2, 0x00, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0xf7, 0x33, 0x33, 0xff, 0xe7, 0x93, 0xdd, 0xf3, 0x33, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0xb7, 0x33, 0x33, 0xff, 0xe7, 0x93, 0x81, 0xc3, 0x33, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf6, 0x37, 0x33, 0x33, 0xff, 0xe7, 0x33, 0x9f, 0xb3, 0x33, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xf7, 0x77, 0x33, 0x33, 0xff, 0xe7, 0x33, 0xcf, 0x33, 0x33, 0x3f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xe3, 0x62, 0x01, 0x01, 0xff, 0xc0, 0xf1, 0xe1, 0x80, 0x11, 0x1f, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfd, 0xff, 0xff, 0xff, 0xb0, 0x3f, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x07, 0xff, 0xff, 0x30, 0x13, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0x3f, 0xff, 
  0xff, 0xf7, 0xf7, 0xff, 0xff, 0x3f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7e, 0x1f, 0xff, 
  0xff, 0x20, 0x02, 0xff, 0xff, 0x3f, 0xf3, 0xff, 0xff, 0xff, 0xef, 0xff, 0xfc, 0x38, 0x07, 0xff, 
  0xff, 0x20, 0x02, 0x7f, 0xff, 0x3d, 0xf3, 0xff, 0xff, 0xfe, 0xdf, 0xff, 0xfc, 0x38, 0x07, 0xff, 
  0xff, 0x20, 0x02, 0x7f, 0xff, 0x3d, 0xf3, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xfc, 0x3f, 0x3f, 0xff, 
  0xff, 0x21, 0x82, 0x7f, 0xff, 0x3d, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0x3f, 0xff, 
  0xff, 0x23, 0xe2, 0x7f, 0xff, 0x3c, 0xb3, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 
  0xff, 0x23, 0xe2, 0x7f, 0xff, 0x3a, 0xf3, 0xff, 0xff, 0xdb, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 
  0xff, 0x21, 0x82, 0x7f, 0xff, 0x3f, 0x73, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0x87, 0x3f, 0xff, 
  0xff, 0x20, 0x02, 0x7f, 0xff, 0x3f, 0x73, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 
  0xff, 0x20, 0x00, 0x7f, 0xff, 0x3f, 0xf3, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 
  0xff, 0x20, 0x02, 0xff, 0xff, 0x3f, 0xf3, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xdc, 0x19, 0xff, 0xff, 0xff, 0xb5, 0xff, 0xff, 0xdf, 0x9f, 0xff, 0xff, 0x87, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0xf2, 0xff, 0xfe, 0x06, 0x07, 0xff, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0x01, 0x80, 0xff, 0xff, 0xff, 0xbb, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x75, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0x80, 0x00, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xe0, 0x83, 0xff, 0xff, 0xfb, 0xbf, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xfe, 0x40, 0xff, 0xff, 
  0xff, 0xc0, 0x81, 0xff, 0xff, 0xf7, 0x7f, 0xff, 0xff, 0x02, 0x0f, 0xff, 0xfc, 0xcf, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0xff, 0xff, 0xee, 0xff, 0xff, 0xff, 0x82, 0x1f, 0xff, 0xfc, 0xcf, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0x7f, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xfd, 0xc0, 0x3f, 0xff, 
  0xff, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xfc, 0xff, 0x8f, 0xff, 
  0xff, 0x8c, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xfe, 0xfc, 0xcf, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 
  0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);

  display.begin(i2c_Addr, true); 
  display.clearDisplay();

  display.drawBitmap(0, 0,  myBitmap,128, 64, SH110X_WHITE);// WHITE for SSD1306
  display.display();
  delay(1000);
  display.invertDisplay(1);
  delay(3000);

    // draw the first ~12 characters in the font
  testdrawchar();
  display.display();
  delay(2000);
  display.clearDisplay();
  
  
}

void loop() {
  // put your main code here, to run repeatedly:
// text display tests
display.clearDisplay();
  display.invertDisplay(0);
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);
  display.println(" ");
  display.display();
  delay(100);
  display.println(" ");
  display.display();
  delay(100);
  display.setTextSize(2);
  display.setTextColor(SH110X_WHITE);
  display.print("BPM");
  display.display();
  delay(100);
  display.print(" ");
  display.display();
  delay(100);
  display.print(":");
  display.display();
  delay(100);
  display.print(" ");
  display.display();
  delay(100);
  display.print("_");
  display.display();
  delay(500);
  display.print("_");
  display.display();
  delay(500);
  display.println("_");
  display.display();
  delay(500);
  display.print("SPO2");
  display.display();
  delay(100);
  display.print(":");
  display.display();
  delay(100);
  display.print(" ");
  display.display();
  delay(100);
  display.print("_");
  display.display();
  delay(500);
  display.print("_");
  display.display();
  delay(500);
  display.println("_");
  display.display();
  delay(500);
//  display.setTextColor(SH110X_BLACK, SH110X_WHITE); // 'inverted' text
  display.display();
  delay(5000);
}

void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);
  display.setCursor(0, 0);

  for (uint8_t i = 0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }
  display.display();
  delay(1);
}
